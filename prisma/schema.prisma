// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  avatar     String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_role      user_role[]
  password_reset password_reset?
  email_reset    email_reset?
}

model role {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role user_role[]
}

model user_role {
  user_id    Int
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, role_id])
}

model password_reset {
  id         Int      @id @default(autoincrement())
  token      Int      @unique
  user_id    Int      @unique
  expired_at DateTime

  user user @relation(fields: [user_id], references: [id])
}

model email_reset {
  id         Int      @id @default(autoincrement())
  otp        Int      @unique
  user_id    Int      @unique
  expired_at DateTime

  user user @relation(fields: [user_id], references: [id])
}
